PYENV_VERSION=3.10.2
NVM_VERSION=v0.39.2
ALACRITTY_VERSION=v0.13.0
TERRAFORM_DOCS_VERSION=v0.16.0
GH_VERSION=2.40.1
KUBE_VERSION=v1.29

function _install_rbenv() {
  echo Installing Ruby version manager
  if [ -e ~/.rbenv ];then
    git -C ~/.rbenv pull
    git -C "$(rbenv root)"/plugins/ruby-build pull
  else
    echo Installing Ruby version manager
    git clone https://github.com/rbenv/rbenv.git ~/.rbenv
    export PATH="~/.rbenv/bin:$PATH"
    hash -r
    mkdir -p "$(rbenv root)"/plugins
    git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build
  fi
}

function _install_deps() {
  echo Installing dependencies
  if which apt > /dev/null; then
    sudo apt update
    sudo apt upgrade -y
    sudo apt-get remove -y --purge 'vim*'
    sudo apt install -y \
      apt-transport-https \
      build-essential \
      ca-certificates \
      curl \
      git \
      fzf \
      keychain \
      libbz2-dev \
      libffi-dev \
      libffi-dev \
      liblzma-dev \
      libncursesw5-dev \
      libreadline-dev \
      libsqlite3-dev \
      libssl-dev \
      libxml2-dev \
      libxmlsec1-dev \
      llvm \
      make \
      nano \
      software-properties-common \
      tk-dev \
      unzip \
      wget \
      xz-utils \
      zip \
      zlib1g-dev \
      tmux \
      bash-completion \
      autoconf \
      moreutils \
      golang

  fi
  if [[ "$WSL_DISTRO_NAME" == "Ubuntu" ]];then
    . /etc/os-release
    # Starting from Ubuntu 22.04 LTS, Ubuntu on WSL no longer bundled with wslu. Please install the PPA version.
    if [[ "$VERSION_ID" == "22.04" ]];then
      sudo apt install ubuntu-wsl -y
      sudo add-apt-repository ppa:wslutilities/wslu -y
      sudo apt update
      sudo apt install wslu -y
    fi

  elif [[ "$WSL_DISTRO_NAME" == "Debian" ]];then
    sudo apt install gnupg2 apt-transport-https -y
    wget -O - https://pkg.wslutiliti.es/public.key | sudo tee /etc/apt/trusted.gpg.d/wslu.asc
    echo "deb https://pkg.wslutiliti.es/debian $(. /etc/os-release && echo "$VERSION_CODENAME") main" | sudo tee /etc/apt/sources.list.d/wslu.list
    sudo apt update
    sudo apt install wslu -y
  fi
}

function _install_gh_cli() {
  sudo install -m 644 /dev/null /usr/share/keyrings/githubcli-archive-keyring.gpg
  curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /usr/share/keyrings/githubcli-archive-keyring.gpg >/dev/null
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
  sudo apt update
  sudo apt install gh -y
}

function _install_spaceship_prompt() {
  if [ ! "$HOME/.zsh" ];then mkdir -p "$HOME/.zsh";fi
  if [ -e "$HOME/.zsh/spaceship" ];then
    git pull -C "$HOME/.zsh/spaceship"
  else
    git clone --depth=1 https://github.com/spaceship-prompt/spaceship-prompt.git "$HOME/.zsh/spaceship"
  fi
}

function _install_polyglot_prompt() {
  wget -q https://raw.githubusercontent.com/agkozak/polyglot/master/polyglot.sh -O ~/.local/bin/polyglot.sh
}

function _install_pyenv() {
  echo Installing Python version manager
  if [ ! -e ~/.pyenv ];then
  curl -s https://pyenv.run | bash
  export PYENV_ROOT="$HOME/.pyenv"
  command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
  else
    pyenv update
  fi

  pyenv versions | grep $PYENV_VERSION || (pyenv install $PYENV_VERSION; pyenv global $PYENV_VERSION)
}

function _install_poetry() {
  echo Installing Poetry for Python
  curl -sSL https://install.python-poetry.org | python3 -
  poetry --version
  PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring poetry self add poetry-plugin-up poetry-plugin-export
  PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring poetry self update
  PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring poetry self show plugins
}

function _install_nvm() {
  echo Installing Node.js version manager
  curl -s -o- https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh | bash
  export NVM_DIR=~/.nvm
  [ -s $NVM_DIR/nvm.sh ] && . $NVM_DIR/nvm.sh  # This loads nvm
  [ -s $NVM_DIR/bash_completion ] && . $NVM_DIR/bash_completion  # This loads nvm bash_completion
  nvm install --lts --latest-npm
  source <(npm completion)
}

function _install_tfenv() {
  echo Installing Terraform version manager
  if [ -e ~/.tfenv ];then
    git -C ~/.tfenv pull
  else
    git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
  fi
}

function _install_rust() {
  echo Installing Rust
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path --profile default -y
  . ~/.cargo/env
}

function _install_cspell() {
  echo Installing cspell
  npm install -g cspell
  if [ -L ~/.local/bin/cspell ];then
    rm -f ~/.local/bin/cspell
  fi
  ln -s $(which cspell) ~/.local/bin/cspell
}

function _install_aws_azure_login() {
  echo Installing aws-azure-login
  npm install -g aws-azure-login
  if [ -L ~/.local/bin/aws-azure-login ];then
    rm -f ~/.local/bin/aws-azure-login
  fi
  ln -s $(which aws-azure-login) ~/.local/bin/aws-azure-login
}

function _install_aws() {
  echo Installing AWS CLI
  local tmpdir=$(mktemp -d)
  pushd $tmpdir
  curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  unzip -q awscliv2.zip
  if aws --version 2>/dev/null;then
    sudo ./aws/install --update
  else
    sudo ./aws/install
  fi
  popd
  rm -rf $tmpdir
}

function _install_lazydocker() {
  echo Installing lazydocker
  curl -s https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash
}

function _install_docker() {
  echo Installing Docker
  sudo apt-get remove docker docker-engine docker.io containerd runc -y
  sudo groupadd docker
  sudo usermod -aG docker ${USER}
  sudo install -m 0755 -d /etc/apt/keyrings
  if [ ! /etc/apt/keyrings/docker.asc ];then
    sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc
  fi

  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  sudo apt-get update
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
}

function _install_kubectl() {
  curl -fsSL https://pkgs.k8s.io/core:/stable:/${KUBE_VERSION}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/${KUBE_VERSION}/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
  sudo apt update
  sudo apt install -y kubectl kubeadm
}

function _install_alacrity_support() {
  echo Installing Alacritty
  wget -q https://github.com/alacritty/alacritty/releases/download/$ALACRITTY_VERSION/alacritty.bash -O ~/.local/share/bash-completion/alacritty.bash
  curl -s https://github.com/alacritty/alacritty/releases/download/$ALACRITTY_VERSION/alacritty.info | sudo tic -xe alacritty,alacritty-direct -
  infocmp alacritty 2>&1 >/dev/null
}

function _install_tflint() {
  echo Installing TFlint
  curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
}

function _install_vim() {
  echo Installing Vim
  if uname -s | grep -i linux; then
    destdir=/usr/share/neovim
    if [ -d $destdir ];then
      sudo rm -rf $destdir
    fi
    sudo mkdir -p $destdir
    curl -L -s https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz | sudo tar -xz -C $destdir --strip-components=1
    if [ -L /usr/local/bin/nvim ];then rm /usr/local/bin/nvim;fi
    sudo ln -s "$destdir/bin/nvim" "/usr/local/bin/nvim"
    sudo update-alternatives --install /usr/local/bin/vim vim $(which nvim) 20
  fi
}

function _configure_nvim() {
  echo Configuring Vim
  hash -r
  if ! type nvim; then
    echo "Neovim not installed"
    return
  fi

  pyenv virtualenv $PYENV_VERSION neovim3
  pyenv local neovim3
  pyenv exec pip install neovim
  vim +PlugInstall +qall
}

function _install_terraform_docs() {
  echo Installing terraform-docs
  curl -sSL https://terraform-docs.io/dl/${TERRAFORM_DOCS_VERSION}/terraform-docs-${TERRAFORM_DOCS_VERSION}-$(uname)-amd64.tar.gz | tar -xz -C ~/.local/bin
}

function _start_ssh_agent() {
  echo startup ssh agent
  /usr/bin/ssh-agent -s > ~/.agent;

}

function _configure_locale() {
  echo Generating locale
  bash -c 'sudo locale-gen $LANG'
}

function _install_sam_cli() {
  echo Installing AWS SAM CLI
  wget -q https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
  unzip -q aws-sam-cli-linux-x86_64.zip -d sam-installation
  if sam --version 2>/dev/null;then
    sudo ./sam-installation/install --update
  else
    sudo ./sam-installation/install
  fi
  rm -rf sam-installation aws-sam-cli-linux-x86_64.zip
}

function _install_taskfile_cli() {
  echo Installing Taskfile
  sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin
  mkdir -p ~/.local/share/bash-completion
  wget https://raw.githubusercontent.com/go-task/task/main/completion/bash/task.bash -O ~/.local/share/bash-completion/task.bash

}

function _configure_global_git() {
  git config --global init.defaultBranch main
}

function _install_pipx() {
  pyenv shell $PYENV_VERSION

  pyenv exec pip install --user pipx
}

function _install_nvshim() {
  pipx install git+https://github.com/iamogbz/nvshim.git
}

function _install_tmux_completions() {
  wget -O ~/.local/share/bash-completion/tmux.bash https://raw.githubusercontent.com/imomaliev/tmux-bash-completion/master/completions/tmux
}

function _install_pnpm() {
  curl -fsSL https://get.pnpm.io/install.sh | sh -
}

function _install_adr_tools() {
  if [[ ! -e ~/.local/src/adr-tools ]]; then
    git clone https://github.com/npryce/adr-tools.git \
      ~/.local/src/adr-tools
  fi
  git -C ~/.local/src/adr-tools pull
}

function _install_glow() {
  go install github.com/charmbracelet/glow@latest
}

function _install_ctags() {
  if [[ -e ~/.local/src/ctags ]];then
    git -C ~/.local/src/ctags pull
  else
      git clone https://github.com/universal-ctags/ctags.git ~/.local/src/ctags
  fi

  cd ~/.local/src/ctags
  ./autogen.sh
  ./configure --prefix=$HOME/.local  # use --prefix=/where/you/want to override installation directory, defaults to /usr/local
  make
  make install # may require extra privileges depending on where to install
}

function _install_vale() {
  curl -Ls https://github.com/errata-ai/vale/releases/download/v3.6.0/vale_3.6.0_Linux_64-bit.tar.gz | tar -C $HOME/.local/bin -xz vale
  chmod +x $HOME/.local/bin/vale
  vale sync
}

function _install_aws_vault() {
  wget -O ~/.local/bin/aws-vault  https://github.com/99designs/aws-vault/releases/latest/download/aws-vault-linux-amd64
  chmod +x ~/.local/bin/aws-vault
}

function _install_ripgrep() {
  wget https://github.com/BurntSushi/ripgrep/releases/download/14.1.0/ripgrep_14.1.0-1_amd64.deb -O ripgrep.deb
  sudo apt install ./ripgrep.deb -y && rm -rf ripgrep.db
}

function _install_fd() {
  wget https://github.com/sharkdp/fd/releases/download/v10.1.0/fd_10.1.0_amd64.deb -O fd.deb
  sudo apt install ./fd.deb -y && rm -f fd.deb
}

# Not in the install.sh
function _install_krew_df_pv() {
  curl https://krew.sh/df-pv | bash
}

function _install_goenv() {
  if [ -d ~/.goenv ];then
    git -C ~/.goenv pull
  else
    git clone https://github.com/go-nv/goenv.git ~/.goenv
  fi
}
